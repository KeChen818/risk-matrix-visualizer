# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OluLgNAZ97_6vYLj362-W4YwEJc-3M4-
"""

import matplotlib.pyplot as plt
import matplotlib.patches as patches
from collections import defaultdict
import random

# === Generate 100 random risks: (ID, Likelihood (x), Impact (y)) ===
risks = [(i + 1, random.randint(1, 6), random.randint(1, 6)) for i in range(100)]

# === Material cells (Top-right triangle) ===
material_cells = [(x, y) for x in range(1, 7) for y in range(1, 7) if x + y >= 8]

# === Axis Labels ===
x_labels = [
    "0- Extr. Rare\n(< once in 50 yrs)",
    "1- Rare\n(>20 yrs)",
    "2- Unlikely\n(20 yrs)",
    "3- Possible\n(5 yrs)",
    "4- Likely\n(1 yr)",
    "5- Certain\n(multiple/yr)"
]

y_labels = [
    "0 – Extr. Low\n(< $100m)",
    "1 – Low\n($100m–200m)",
    "2 – Minor\n($200m–500m)",
    "3 – Moderate\n($500m–1bn)",
    "4 – Significant\n($1bn–2bn)",
    "5 – Major\n(> $2bn)"
]

fig, ax = plt.subplots(figsize=(16, 9))

# === Draw Grid ===
for i in range(7):
    ax.axhline(i, color='black', linewidth=0.5)
    ax.axvline(i, color='black', linewidth=0.5)

# === Highlight material cells ===
for x, y in material_cells:
    ax.add_patch(patches.Rectangle((x - 1, 6 - y), 1, 1, color='gray', alpha=0.4))
    ax.text(x - 0.5, 6 - y + 0.5, 'Material', ha='center', va='center', fontsize=7, color='white')

# === Red Outline ===
outline_coords = [
    (1, 0), (1, 1),
    (2, 1), (2, 2),
    (3, 2), (3, 3),
    (4, 3), (4, 4),
    (5, 4), (5, 5),
    (6, 5), (6, 0)
]
outline_x, outline_y = zip(*outline_coords)
ax.plot(outline_x, outline_y, color='red', linewidth=1.5)

# === Group risks by cell ===
cell_risks = defaultdict(list)
for rid, x, y in risks:
    cell_risks[(x, y)].append(rid)

# === Draw Bubbles: top-left aligned, 1 row unless >6 ===
bubble_radius = 0.08
max_per_row = 6
spacing_x = 0.15
spacing_y = 0.18

for (x, y), rids in cell_risks.items():
    n = len(rids)
    is_material = (x, y) in material_cells
    edge_color = 'red' if is_material else 'black'

    for idx, rid in enumerate(rids):
        col = idx % max_per_row
        row = idx // max_per_row

        px = x - 1 + spacing_x * col + 0.1  # top-left alignment
        py = 6 - y + spacing_y * row + 0.1

        circle = plt.Circle((px, py), bubble_radius, facecolor='white', edgecolor=edge_color, lw=1.2)
        ax.add_patch(circle)
        ax.text(px, py, str(rid), ha='center', va='center', fontsize=6.5)

# === Set Axis Labels ===
ax.set_xticks([i + 0.5 for i in range(6)])
ax.set_xticklabels(x_labels, fontsize=9, ha='center', rotation=30)

ax.set_yticks([i + 0.5 for i in range(6)])
ax.set_yticklabels(list(reversed(y_labels)), fontsize=9)

# === Final Touches ===
ax.set_xlim(0, 6)
ax.set_ylim(0, 6)
ax.set_aspect('equal')
ax.tick_params(left=False, bottom=False)
ax.invert_yaxis()
ax.set_title("Risk Matrix with 100 Tightly Aligned Risks", fontsize=14, weight='bold')

plt.subplots_adjust(left=0.05, right=0.75, top=0.95, bottom=0.1)
###
plt.savefig("risk_matrix.png", dpi=300)
plt.show()

##################### Part II #############

!pip install python-pptx

from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.enum.shapes import MSO_SHAPE
from pptx.dml.color import RGBColor

# === Sample risk list ===
risk_list = [
    "1. Risk of system failure due to overload",
    "2. Regulatory breach in transaction reporting",
    "3. High exposure to emerging markets volatility",
    "4. Cybersecurity gap in remote systems",
    "5. Material vendor dependency in Asia"
]

# === Create slide deck ===
prs = Presentation()
slide_layout = prs.slide_layouts[6]  # Blank slide
slide = prs.slides.add_slide(slide_layout)

# === Define slide width/height ===
SLIDE_WIDTH = prs.slide_width  # Default 10 inches
SLIDE_HEIGHT = prs.slide_height  # Default 5.625 inches (16:9)

# === Insert risk list on the left (3/5 width) ===
left_box_width = SLIDE_WIDTH * 0.6
left_box = slide.shapes.add_textbox(
    left=Inches(0.5),
    top=Inches(0.5),
    width=left_box_width - Inches(1),
    height=SLIDE_HEIGHT - Inches(1)
)

tf = left_box.text_frame
tf.word_wrap = True
p = tf.paragraphs[0]
p.text = "Key Risks:\n"
p.font.bold = True
p.font.size = Pt(20)

# Add each risk
for risk in risk_list:
    p = tf.add_paragraph()
    p.text = risk
    p.level = 0
    p.font.size = Pt(14)

# === Insert dashboard image on the right (2/5 width) ===
img_path = "risk_matrix.png"
img_left = SLIDE_WIDTH * 0.35  # Move it left
img_height = SLIDE_HEIGHT * 0.85  # 7/8 height
slide.shapes.add_picture(
    img_path,
    left=img_left,
    top=Inches(0.4),
    height=img_height
)


# === Save PowerPoint ===
prs.save("risk_dashboard_slide.pptx")